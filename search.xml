<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>요청 매핑하기</title>
      <link href="/2019/05/20/%EC%9A%94%EC%B2%AD-%EB%A7%A4%ED%95%91%ED%95%98%EA%B8%B0/"/>
      <url>/2019/05/20/%EC%9A%94%EC%B2%AD-%EB%A7%A4%ED%95%91%ED%95%98%EA%B8%B0/</url>
      
        <content type="html"><![CDATA[<p>GET</p><ul><li>Get요청은 캐싱할 수 있다. 조건에 따라 304 - 서버가 body에 넣어서 보내지 않더라도</li><li>idemponent - 동일한 요청에 따라 동일한 응답을 리턴해야한다.</li></ul><p>POST</p><ul><li>URI는 post에 실어보내는 데이터를 처리할 수 있는 리소스</li><li>리소스를 새로 만들거나 수정하므로…</li><li>idemponent하지않을 수 있다. - 같은 요청을 하더라도 결과 값이 달라질 수 있다.</li></ul><p>PUT</p><ul><li>URI는 리소스 자체를 지칭한다.?</li><li>POST, PUT은 URI의 의미가 서로 다르다…</li><li>idemponent하다</li></ul><p>POST? PUT 차이점???</p><p>PATCH</p><ul><li>PUT과 비슷하지만, 기존 서버데이터와 put요청에 실어서 보내는 데이터의 차이점만 찾아서 보낸다? 일부의 데이터가 바뀔때는 PATCH…??</li></ul><p>DELETE</p><h3 id="헤더와-매개변수-매핑하기"><a href="#헤더와-매개변수-매핑하기" class="headerlink" title="헤더와 매개변수 매핑하기"></a>헤더와 매개변수 매핑하기</h3><p>consumes, produces와 다르게 좀 더 일반적인 방법이다.</p><h3 id="SampleController-java"><a href="#SampleController-java" class="headerlink" title="SampleController.java"></a>SampleController.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/hello"</span>, headers = HttpHeaders.CONTENT_TYPE +<span class="string">"="</span>+<span class="string">"application/json"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello jjjpark"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SampleControllerTest-java"><a href="#SampleControllerTest-java" class="headerlink" title="SampleControllerTest.java"></a>SampleControllerTest.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@WebMvcTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleControllerTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    MockMvc mockMvc;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">helloTest</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        mockMvc.perform(get(<span class="string">"/hello"</span>).contentType(MediaType.APPLICATION_JSON_UTF8))</span><br><span class="line">                .andDo(print())</span><br><span class="line">                .andExpect(status().isOk());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HttpHeaders.CONTENT_TYPE는 consumes로 바꿀 수 있고,<br>HttpHeaders.ACCEPT는 produces로 바꿀 수 있다.</p><p>consumes는 요청을 받을때, Content-type이 맞는 요청만 받는 다는 뜻이고, produces는 요청에 대한 결과를 반환할때, Accept의 형식으로 반환한다는 의미이다.</p><h2 id="커스텀-annotation"><a href="#커스텀-annotation" class="headerlink" title="커스텀 annotation"></a>커스텀 annotation</h2><p>annotation위에 사용할 수 있는 annotation을 meta annotation</p><p>runtime시에 annotation은 사라진다.</p><p>@Retention - 언제까지 정보를 가지고 있을 것인가? (java의 annotation)</p>]]></content>
      
      
      <categories>
          
          <category> spring framework </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>spring MVC 설정 정리</title>
      <link href="/2019/05/20/%E1%84%89%E1%85%A5%E1%86%AF%E1%84%8C%E1%85%A5%E1%86%BC%20spring-MVC-%E1%84%89%E1%85%A5%E1%86%AF%E1%84%8C%E1%85%A5%E1%86%BC-%E1%84%8C%E1%85%A5%E1%86%BC%E1%84%85%E1%85%B5/"/>
      <url>/2019/05/20/%E1%84%89%E1%85%A5%E1%86%AF%E1%84%8C%E1%85%A5%E1%86%BC%20spring-MVC-%E1%84%89%E1%85%A5%E1%86%AF%E1%84%8C%E1%85%A5%E1%86%BC-%E1%84%8C%E1%85%A5%E1%86%BC%E1%84%85%E1%85%B5/</url>
      
        <content type="html"><![CDATA[<p>우리가 SpringMVC를 사용하려면 여러가지 필요한 설정들이 있다. 예를들어</p><ul><li>요청에 대해 body를 객체로 변환한다.(MessageConverter)</li><li>요청에 대해 미리 처리를 한다…(HandlerInterceptor)</li><li>등등</li></ul><p>이를 위해서는 handlerInterceptor을 HandlerMapping에 등록해주어야 하고, messageConverter를 HandlerAdapter에 등록해야한다. </p><p>이런걸 쉽게 작성할수 있게끔 @EnableWebMvc 를 사용한다. 이는 기본적인 Spring MVC에서 제공하는 설정을 사용하지 않는 다는 뜻이다 경우에 따라 커스터마이징 하고싶은 경우가 있는데, 그때 WebMvcConfigurer을 implements해서 구현 한다. </p><p>Spring boot는 자동설정으로 인해 다양한 기능이 제공된다. JSON지원,(HttpMessageConverter가 자동으로 등록) Spring boot도 마찬가지고 WebMvcConfigurer을 통해 커스터마이징할 수 있다. 하지만 @EnableWebMvc를 사용하면 Spring boot의 설정을 아무것도 사용하지 않게 된다. 우선은 application.properties에서 key/value를 조정해서 설정을 조절할 수 있는지 먼저 확인한다. 직접 @Bean을 등록을 할 수도 있지만 그렇게 보통하지는 않는다. </p><ol><li>application.properties</li><li>WebMvcConfigurer</li><li>@Bean으로 직접 설정값을 등록</li></ol>]]></content>
      
      
      <categories>
          
          <category> spring framework </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>WebMvcConfigurer</title>
      <link href="/2019/05/17/WebMvcConfigurer/"/>
      <url>/2019/05/17/WebMvcConfigurer/</url>
      
        <content type="html"><![CDATA[<ul><li>addFormatter()</li><li>addResourceHandler</li><li>configureMessageConverter, extendMessageConverter</li><li>기본 Converter(jackson…)을 활성화 하는 방법</li></ul><ul><li><p>addArgumentResolvers()</p></li><li><p>returnValueHandler() : handler에서 리턴하는 값들을 제어하는 handler</p></li><li><p>addViewControllers()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> spring framework </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>HTTP 메시지 컨버터</title>
      <link href="/2019/05/17/HTTP-%EB%A9%94%EC%8B%9C%EC%A7%80-%EC%BB%A8%EB%B2%84%ED%84%B0/"/>
      <url>/2019/05/17/HTTP-%EB%A9%94%EC%8B%9C%EC%A7%80-%EC%BB%A8%EB%B2%84%ED%84%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>HTTP Message converter는 @RequestBody로 들어온 객체에 대해 json, xml 등의 형식으로 convert해준다. 그리고 반환하는 값도 또 한 convert할수 있다. 스프링 부트는 Jackson2를 기본적으로 추가해준다. (ObjectMapper)</p></blockquote><h3 id="SampleController-java"><a href="#SampleController-java" class="headerlink" title="SampleController.java"></a>SampleController.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/jsonMessage"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">jsonMessage</span><span class="params">(@RequestBody Person person)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> person;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SampleControllerTest-java"><a href="#SampleControllerTest-java" class="headerlink" title="SampleControllerTest.java"></a>SampleControllerTest.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fas..</span><br><span class="line">  </span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@AutoConfigureMockMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleControllerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    MockMvc mockMvc;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    PersonRepository personRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ObjectMapper objectMapper;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jsonMessage</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        person.setId(<span class="number">2019l</span>);</span><br><span class="line">        person.setName(<span class="string">"jonghoon"</span>);</span><br><span class="line"></span><br><span class="line">        String jsonString = objectMapper.writeValueAsString(person);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.mockMvc.perform(get(<span class="string">"/jsonMessage"</span>)</span><br><span class="line">                .contentType(MediaType.APPLICATION_JSON_VALUE)</span><br><span class="line">                .accept(MediaType.APPLICATION_JSON_VALUE)</span><br><span class="line">                .content(jsonString))</span><br><span class="line">                .andDo(print())</span><br><span class="line">                .andExpect(status().isOk());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>this.mockMvc.perform()에 HTTP요청에 대한 정보가 들어간다. Content-type요청이 보내는 body의 형식을 의미한다. 여기서는 application/json이다. 그리고 .accept()는 요청이 결과로 얻고 싶은 데이터의 형식을 의미한다.</p><p>이게 왜 중요하냐면 spring boot는 이 형식을 보고 어떤 converter를 bean으로 등록해줄지 결정하기 때문이다.</p><ul><li>MvcConfigurationSupport : 각 converter가 있으면 알아서 messageConverter를 등록해준다. classpath에 라이브러리가 있는 경우에만. </li></ul>]]></content>
      
      
      <categories>
          
          <category> spring framework </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Resource Handler</title>
      <link href="/2019/05/17/%E1%84%89%E1%85%A5%E1%86%AF%E1%84%8C%E1%85%A5%E1%86%BC%20Resource-Handler/"/>
      <url>/2019/05/17/%E1%84%89%E1%85%A5%E1%86%AF%E1%84%8C%E1%85%A5%E1%86%BC%20Resource-Handler/</url>
      
        <content type="html"><![CDATA[<p>Html, img, css와 같은 정적파일들을 제공하는 것.</p><p>정적인 자원을 처리하는 default Servlet이 있다.</p><p>Spring은 default</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org...</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">"/mobile/**"</span>)</span><br><span class="line">                .addResourceLocations(<span class="string">"classpath:/mobile/"</span>)</span><br><span class="line"><span class="comment">//                .setCacheControl(CacheControl.maxAge(10, TimeUnit.MINUTES)) // resource를 10분동안 캐싱한다.</span></span><br><span class="line">                .resourceChain(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>WebConfig를 위와 같이 설정하여 Resource handler를 사용할 수 있다. Cache 여부도 설정할 수 있다. 이는 web에서 정적파일 요청이 왔을때, 기존에 있는걸 캐싱해놓으면, 304를 반환하여 기존의 정적파일과 변화가 없음을 알려준다. </p><p>이걸 왜사용하느냐면, 정적파일에 대한 캐싱여부 등 Resource에 대한 handling을 하려고 쓰는 것같다.</p>]]></content>
      
      
      <categories>
          
          <category> spring framework </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Handler Interceptor</title>
      <link href="/2019/05/16/Handler-Interceptor/"/>
      <url>/2019/05/16/Handler-Interceptor/</url>
      
        <content type="html"><![CDATA[<p>HandlerMapping에서 interceptor를 추가해준다.</p><p>요청 처리 전/후에 무언가 처리하고 싶으면 interceptor를 추가한다.</p><ol><li>preHandle 1</li><li>preHandle 2</li><li>요청처리</li><li>postHandle 2</li><li>postHandle 1 - 다음과 같이 역순으로 호출 된다.</li><li>뷰 렌더링</li><li>afterCompletion 2</li><li>afterCompletion 1</li></ol><p>ServletFilter와의 차이점</p><ul><li>더 구체적이다.</li><li>일반적인 기능을 구현할때 - ServletFilter</li><li>Spring에 특화된 정보를 참고해야 한다. - HandlerInterceptor</li><li>Xss attack<ul><li>웹의 form에 다가 script를 넣어 해킹하는 방법 - ServletFilter</li><li>Naver - LUCY XSS</li></ul></li></ul><p>HandlerInterceptor을 구현하기 위해서는 Interceptor java파일을 생성해야한다.</p>]]></content>
      
      
      <categories>
          
          <category> spring framework </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Test와 Formatter</title>
      <link href="/2019/05/16/Test%EC%99%80-Formatter/"/>
      <url>/2019/05/16/Test%EC%99%80-Formatter/</url>
      
        <content type="html"><![CDATA[<h3 id="SampleController-java"><a href="#SampleController-java" class="headerlink" title="SampleController.java"></a>SampleController.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springfram...</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(@RequestParam(<span class="string">"name"</span>)</span> Person person)</span>&#123;</span><br><span class="line">        <span class="comment">//formatter의 역할을 name이라는 글자를 Person으로 넣어주는 것이다.</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello "</span> + person.getName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SampleControllerTest-java"><a href="#SampleControllerTest-java" class="headerlink" title="SampleControllerTest.java"></a>SampleControllerTest.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> me.jjjpark.demobootweb;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.MockMvc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.*;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="comment">//@WebMvcTest //@Component 떄문에 다른걸 사용해야 한다.</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@AutoConfigureMockMvc</span> <span class="comment">//MockMvc가 자동을 등록되지 않으므로 추가</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleControllerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    MockMvc mockMvc;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mockMvc.perform(get(<span class="string">"/hello"</span>)</span><br><span class="line">                .param(<span class="string">"name"</span>,<span class="string">"jjjpark"</span>)) <span class="comment">//queryString (name=jjjpark)</span></span><br><span class="line">                .andDo(print()) <span class="comment">//결과를 출력한다.</span></span><br><span class="line">                .andExpect(content().string(<span class="string">"hello jjjpark"</span>)); <span class="comment">//예상하는 결과</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="PersonFormatter-java"><a href="#PersonFormatter-java" class="headerlink" title="PersonFormatter.java"></a>PersonFormatter.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.format.Formatter;</span><br><span class="line">...</span><br><span class="line">  </span><br><span class="line"><span class="meta">@Component</span> <span class="comment">//Web과 관련된 bean이라고 인식 못하기떄문에 Test가 깨진다.(@WebMvcTest 때문에)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonFormatter</span> <span class="keyword">implements</span> <span class="title">Formatter</span>&lt;<span class="title">Person</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">parse</span><span class="params">(String s, Locale locale)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        person.setName(s);</span><br><span class="line">        <span class="keyword">return</span> person;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">print</span><span class="params">(Person person, Locale locale)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> person.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Spring-data-JPA-이런게-있더라"><a href="#Spring-data-JPA-이런게-있더라" class="headerlink" title="Spring data JPA - 이런게 있더라~"></a>Spring data JPA - 이런게 있더라~</h3>]]></content>
      
      
      <categories>
          
          <category> spring framework </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>spring-untitled</title>
      <link href="/2019/05/03/%E1%84%89%E1%85%A5%E1%86%AF%E1%84%8C%E1%85%A5%E1%86%BC%20spring-untitled/"/>
      <url>/2019/05/03/%E1%84%89%E1%85%A5%E1%86%AF%E1%84%8C%E1%85%A5%E1%86%BC%20spring-untitled/</url>
      
        <content type="html"><![CDATA[<p>@Configruation은 annotation기반의 환경 구성을 돕는다. 예를 들어 @Bean을 사용할 수 있다. 이는 Spring Container가 Bean을 생성하고, Runtime에 Bean의 요청을 처리할 것을 선언한다. </p>]]></content>
      
      
      <categories>
          
          <category> spring-framework </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Gateway</title>
      <link href="/2019/04/29/Gateway/"/>
      <url>/2019/04/29/Gateway/</url>
      
        <content type="html"><![CDATA[<p>두 컴퓨터가 네트워크 상에서 서로 연결되기 위해서는 같은 통신 프로토콜을 이용해야 한다. gateway는 이 통신 프로토콜을 적절히 변환해주는 변환기 역할을 한다. </p><p>유/무선 공유기는 gateway이다. 공유기는 internet과 사용자의 컴퓨터를 연결시켜준다. </p><p>같은 로컬 네트워크 구역에 연결하고자 하는 2대의 컴퓨터가 있다면, IP주소와 서브넷 마스크만 있어도 통신이 가능하다. 하지만 internet등 밖으로 나갈떄는 gateway도 있어야 한다.</p><p>gateway주소도 ip주소처럼 고유한 값을 가져야 하는데, 일반적으로 ip주소중 끝자리만 다른 형태이다.</p>]]></content>
      
      
      <categories>
          
          <category> computer science </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>가상화, 그리고 docker</title>
      <link href="/2019/04/26/%E1%84%80%E1%85%A1%E1%84%89%E1%85%A1%E1%86%BC%E1%84%92%E1%85%AA,%20%E1%84%80%E1%85%B3%E1%84%85%E1%85%B5%E1%84%80%E1%85%A9%20docker/"/>
      <url>/2019/04/26/%E1%84%80%E1%85%A1%E1%84%89%E1%85%A1%E1%86%BC%E1%84%92%E1%85%AA,%20%E1%84%80%E1%85%B3%E1%84%85%E1%85%B5%E1%84%80%E1%85%A9%20docker/</url>
      
        <content type="html"><![CDATA[<ul><li>가상머신은 성능상 너무 후지다.</li><li>docker는 프로세스의 격리된 공간을 만들어 주는 도구이다.</li><li>다양한 프로그램, 실행환경을 추상화하고, 동일한 인터페이스를 제공해 프로그램의 배포 및 관리를 단순하게 해준다.</li></ul><p>docker 역시 가상화 기술 중 하나인데 기존방식과는 다른점이 있다. 그렇다면 여기서 <u><strong>가상화</strong></u>는 무엇일까?</p><ul><li><p>가상화 : 기존의 서버하나에 하나의 application이 운영되었는데, 한 서버에 여러 application을 이용할수 있도록 하는 작업, 컴퓨터 리소스의 추상화를 일컫는다. </p><p><img src="https://github.com/jjjpark/test/blob/master/Untitled%20Diagram.png?raw=true" alt="image"></p></li></ul><ol><li>처음에는 호스트 OS위에 게스트 OS 전체를 가상화 했다. 하지만 무겁고 느림</li><li>KVM, Xen이 등장했지만 결국 OS를 설치하여 가상화 하는 방법이어서 성능문제가 발생</li><li><strong>프로세스 격리하는 방식의 등장(Docker)</strong></li></ol><p>docker에서 중요한 개념은 바로 <u><strong>이미지</strong></u> 이다. 이미지는 컨테이너 실행에 필요한 파일과 설정값등을 포함하고 있다. 그리고 변하지 않는다.(Immutable)</p><h3 id="가상화의-주요-용어"><a href="#가상화의-주요-용어" class="headerlink" title="가상화의 주요 용어"></a>가상화의 주요 용어</h3><ul><li>호스트 시스템 : CPU, 메모리, HDD를 장착한 물리적인 시스템 자체</li><li>가상화 운영체제(하이퍼 바이저) : 호스트 시스템 위에 설치되어 가상 머신들이 하드웨어 리소스를 공유하여 사용할 수 있게끔 스케줄링하는 일을 한다.</li><li>가상머신 : 하이퍼바이저에 의해 생성된 가상 하드웨어를 말한다.</li><li>게스트 운영체제 : 가상머신위에 설치된 운영체제를 말한다.</li></ul><h3 id="가상화의-기능"><a href="#가상화의-기능" class="headerlink" title="가상화의 기능"></a>가상화의 기능</h3><ul><li>공유 : 다수의 가상자원들이 하나의 동일한 물리자원과 연결하는 것</li><li>풀링 : 여러개의 물리적 자원으로 하나의 가상 자원을 만든다. (가상디스크??)</li><li>에뮬레이션 : </li><li>캡슐화</li></ul>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>예외처리</title>
      <link href="/2019/04/21/%EC%98%88%EC%99%B8%EC%B2%98%EB%A6%AC/"/>
      <url>/2019/04/21/%EC%98%88%EC%99%B8%EC%B2%98%EB%A6%AC/</url>
      
        <content type="html"><![CDATA[<h2 id="catch-block"><a href="#catch-block" class="headerlink" title="catch block"></a>catch block</h2><blockquote><p>예외가 발생하면 발생한 예외에 해당하는 인스턴스가 생성되고, catch block을 거치면서 instanceof로 검사한다. true가 나오면 그 구문에서 예외를 처리한다.</p></blockquote><ul><li>‘|’ 를 이용해서 multicatchblock을 형성할 수 있다.</li></ul><h4 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;&#125;</span><br><span class="line"><span class="keyword">catch</span>&#123;&#125;</span><br><span class="line"><span class="keyword">finally</span>&#123;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">dis.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>객체지향 프로그래밍</title>
      <link href="/2019/04/18/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-1/"/>
      <url>/2019/04/18/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>초보라면, 기능적으로 완성한 다음 어떻게 하면 객체지향적으로 개선할 수 있을지 고민하면 좋다.</p></blockquote><p>객체는 클래스에 정의된 내용대로 메모리에 생성되는 것</p><ul><li>JDK - java 프로그램 생성 (java 소프트웨어 개발 도구)</li><li>JVM - 프로그램을 실행하는 자바 플랫폼</li><li>JRE - JVM을 생서하는 디스크 상의 부분 ( java 코드를 실행하기 위한 도구)</li></ul><p><img src="/images/jdk.png" alt="image"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Person person; <span class="comment">//person은 참조변수</span></span><br><span class="line">person = <span class="keyword">new</span> Person(); <span class="comment">//class에서 생성한 객체에 대한 주소를 참조변수에 저장</span></span><br></pre></td></tr></table></figure><p>static - is static variable. When class is loaded into memory, static vairable with.<br>method - we should validate the variable.</p><h3 id="Memory-structure-in-JVM"><a href="#Memory-structure-in-JVM" class="headerlink" title="Memory structure in JVM"></a>Memory structure in JVM</h3><p><strong>method area</strong> - if class is used when program is running, JVM store *.class(this class file) in this method area. Then static variable store in.</p><p><strong>call stack</strong> - This provides the memory required for method operations.</p><p><strong>heap</strong> - All instance when program is running is stored in heap.</p><p>반복문보다 재귀호출이 더 오래걸리는 이유는 call stack에 parameter복사와 복귀주소 저장 등, 추가로 시간이 걸리기 때문이다. 그래서 반복문은 stack overflow error를 발생하지 않고, unreachable statement error를 발생시킨다.</p><h3 id="클래스-메서드-인스턴스-메서드"><a href="#클래스-메서드-인스턴스-메서드" class="headerlink" title="클래스 메서드 인스턴스 메서드"></a>클래스 메서드 인스턴스 메서드</h3><ol><li>모든 Instance에 공통으로 사용되는 것에 static을 붙인다.</li><li>Class 변수는 인스턴스를 생성하지 않아도 사용할 수 있다.</li><li>Class method can not use instance variable.</li><li>We consider using static when do not use instance variable in method.</li></ol><p>Staitc method can use instance method after generatting instance.</p><h3 id="Overloading"><a href="#Overloading" class="headerlink" title="Overloading"></a>Overloading</h3><p>We can use equl method name when the variables of serveral methods are different.</p><h3 id="Variable-arguments"><a href="#Variable-arguments" class="headerlink" title="Variable arguments"></a>Variable arguments</h3><p>parameter의 수를 동적으로 지정해 줄 수 있다.</p><h3 id="Constructor"><a href="#Constructor" class="headerlink" title="Constructor"></a>Constructor</h3><p>is init method</p><ul><li><p>this() - call other constructor method.</p></li><li><p>We can copy instance by constructor method</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Car c1 = <span class="keyword">new</span> Car();</span><br><span class="line">Car c2 = <span class="keyword">new</span> Car(c1);</span><br></pre></td></tr></table></figure></li></ul><h3 id="Init-vaiable"><a href="#Init-vaiable" class="headerlink" title="Init vaiable"></a>Init vaiable</h3><ul><li>explicit initialization</li><li>initialization block - instance variable은 생성자를 이용하고, 모든 생성자에서 공통으로 초기화 해야되는 것은 초기화 block를 이용한다.</li><li>constructor initialization</li></ul><h2 id="상속"><a href="#상속" class="headerlink" title="상속"></a>상속</h2><ul><li>멤버변수만 초기화 된다.  </li><li>private, default는 상속은 되는데 접근을 제한하는 것이다.</li><li>형제관계인 클래스는 없다. 오로지 부모와 자식 뿐!</li></ul><h3 id="클래스간의-관계"><a href="#클래스간의-관계" class="headerlink" title="클래스간의 관계"></a>클래스간의 관계</h3><ul><li>포함관계(~has)</li><li>상속관계(~is)</li></ul><h3 id="단일상속"><a href="#단일상속" class="headerlink" title="단일상속"></a>단일상속</h3><ul><li>클래스간의 관계가 복잡해지고, 상속받은 클래스의 멤버변수 명이 같다면 구별이 힘들다.</li></ul><h3 id="Override"><a href="#Override" class="headerlink" title="Override"></a>Override</h3><ul><li><p>조상클래스에 정의된 method를 자식클래스에 재정의 하는 것.</p><h4 id="condition"><a href="#condition" class="headerlink" title="condition"></a>condition</h4><ul><li>접근제어자는 조상클래스보다 좁게 불가능</li><li>throw는 조상보다 더 많이 던질 수 없다.</li><li>인스턴스 -&gt; static method, static method -&gt; 인스턴스 method로 변경할 수 없다.</li></ul></li></ul><h2 id=""><a href="#" class="headerlink" title=" "></a> </h2><h3 id="super"><a href="#super" class="headerlink" title="super"></a>super</h3><ul><li><p>super.name - 조상클래스의 name 멤버변수를 참조한다.</p></li><li><p>super() - 조상 클래스의 생성자를 호출한다.</p><blockquote><p>모든 클래스의 생성자 첫출에는 this() or super()가 호출해야 한다. 자식클래스에서 부모클래스의 멤버변수를 사용할 수 있으므로 생성자로 미리 초기화를 해주어야한다.₩</p></blockquote></li></ul><h3 id="package"><a href="#package" class="headerlink" title="package"></a>package</h3><ul><li>package명은 소문자로 한다.</li><li>import static java.lang.System.out; 와 같이 static을 사용하면 클래스 이름을 생략할 수 있다.</li></ul><h3 id="modifier"><a href="#modifier" class="headerlink" title="modifier"></a>modifier</h3><p>final</p><ul><li>클래스 - 자손클래스 정의 못함</li><li>매서드 - override 못함</li><li>변수 - 수정 못함(상수)</li></ul><blockquote><p>인스턴스 변수의 경우 생성자에서 초기화가 가능하다.</p></blockquote><h3 id="추상클래스"><a href="#추상클래스" class="headerlink" title="추상클래스"></a>추상클래스</h3><ul><li>인스턴스 생성 불가능</li></ul><h3 id="다형성"><a href="#다형성" class="headerlink" title="다형성"></a>다형성</h3><p>한 타입의 참조변수로 여러 타입의 객체를 참조할 수 있도록 다형성을 프로그램적으로 구현하였다.</p><ul><li><p>부모의 참조변수 타입에 자식의 인스턴스 주소를 저장해도 부모의 멤버변수 만 사용할 수 있다. (업캐스팅)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Car car = <span class="keyword">null</span>;</span><br><span class="line">FireEngine fe2 = <span class="keyword">null</span>;</span><br><span class="line">fe2 = (FireEngine) car; <span class="comment">// 가능</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Car car = <span class="keyword">new</span> Car();</span><br><span class="line">FireEngine fe = <span class="keyword">null</span>;</span><br><span class="line">fe = (FireEngine) car; <span class="comment">// ClassCastException: car</span></span><br></pre></td></tr></table></figure><p>참조변수끼리의 형변환은 가능하지만,<br>조상타입의 인스턴스를 자식 타입의 참조변수에 저장하는 것은 불가능 하다.</p></li></ul><h3 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h3><ul><li>형변환 가능여부를 판단하여 알려준다.</li></ul><h3 id="Interface"><a href="#Interface" class="headerlink" title="Interface"></a>Interface</h3><ul><li>모든 멤버변수는 public static final 이고, 생략할 수 있다.</li><li>implement하는 클래스가 interface의 일부만 구현한다면 abstract를 붙여주어야 한다.</li><li>리턴타입이 인터페이스라는 것은 그 메서드가 인터페이스를 구현한 클래스의 인스턴스를 반환한다는 것을 말한다.</li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>middleware</title>
      <link href="/2019/04/18/middleware/"/>
      <url>/2019/04/18/middleware/</url>
      
        <content type="html"><![CDATA[<p>JBoss - middleware</p><p>middleware - software와 software를 이어주는 것</p><p>로마의 수로에 비유한다. 예를들어 was로그들을 가져와서 그 로그를 바탕으로 다른 software를 실행시켜주는 software를 말한다.</p><p>JBoss - 서버를 실행, 종료같은 관리하는 기능을 제공한다.</p>]]></content>
      
      
      <categories>
          
          <category> computer science </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Filebeat, Logstash, Elasticsearch 설치하기(centos)</title>
      <link href="/2019/04/17/Filebeat-Logstash-Elasticsearch-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0-centos/"/>
      <url>/2019/04/17/Filebeat-Logstash-Elasticsearch-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0-centos/</url>
      
        <content type="html"><![CDATA[<p>Centos 처음 설치했을때 외부인터넷과 연결이 되는지 체크해야한다. centos에서 외부인터넷 연결이 되는지 $&gt; ping google.com 로 확인할 수 있고, 외부에서는 ping centos주소(ip addr을 통해 얻을 수 있다.) 로 확인할 수 있다. </p><p>virtualbox의 인터넷연결은  장치 - 네트워크 연결 - 어댑터 브릿지</p><p>Filebeat 설치</p><p>Logstash 설치</p><p>Elasticsearch 설치</p><h2 id="실행"><a href="#실행" class="headerlink" title="실행"></a>실행</h2><blockquote><p>Filebeat, Logstash, Elasticsearch는 모두 Service를 이용하여 실행, 재실행, 종료를 할 수 있다.</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span>&gt; service filebeat start</span><br><span class="line"><span class="meta">$</span>&gt; service logstash start</span><br><span class="line"><span class="meta">$</span>&gt; service elasticsearch start</span><br></pre></td></tr></table></figure><p>Filebeat는 설정값인 filebeat.yml을 기반으로 실행할 수 있다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span>&gt; pwd</span><br><span class="line">/usr/share/filebeat/</span><br><span class="line"><span class="meta">$</span>&gt; ./filebeat -f /etc/filebeat/filbeat.yml</span><br></pre></td></tr></table></figure><h3 id="Logstash-실행"><a href="#Logstash-실행" class="headerlink" title="Logstash 실행"></a>Logstash 실행</h3><blockquote><p>Service를 이용한 실행</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service logstash start</span><br></pre></td></tr></table></figure><blockquote><p>logstash.conf를 기반으로 logstash 실행</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/share/logstash</span><br><span class="line">./logstash -f /etc/logstash/con.d/logstash.conf</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span>&gt; vi logstash.conf</span><br></pre></td></tr></table></figure><h3 id="Elasticsearch-실행"><a href="#Elasticsearch-실행" class="headerlink" title="Elasticsearch 실행"></a>Elasticsearch 실행</h3><p>ping</p><p>ps -ef | grep logstash</p><p>cd /var/log/logstash</p><p>cd /etc/logstash/con.d/logstash.conf</p><p>tail -f</p><p>Netstat -ant</p><p>Firewall</p>]]></content>
      
      
      <categories>
          
          <category> elastic-stack </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>elasticsearch 용어</title>
      <link href="/2019/04/04/elasticsearch-%EC%9A%A9%EC%96%B4/"/>
      <url>/2019/04/04/elasticsearch-%EC%9A%A9%EC%96%B4/</url>
      
        <content type="html"><![CDATA[<h2 id="indexing"><a href="#indexing" class="headerlink" title="indexing"></a>indexing</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">row row this boat</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this apple macbook</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">log row</span><br></pre></td></tr></table></figure><table><thead><tr><th>단어</th><th>doc</th><th>positions</th></tr></thead><tbody><tr><td>row</td><td>0</td><td>[0, 1]</td></tr><tr><td></td><td>1</td><td>[0]</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> elastic-stack </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>SpringMVC 동작원리</title>
      <link href="/2019/03/31/SpringMVC-%E1%84%83%E1%85%A9%E1%86%BC%E1%84%8C%E1%85%A1%E1%86%A8%E1%84%8B%E1%85%AF%E1%86%AB%E1%84%85%E1%85%B5/"/>
      <url>/2019/03/31/SpringMVC-%E1%84%83%E1%85%A9%E1%86%BC%E1%84%8C%E1%85%A1%E1%86%A8%E1%84%8B%E1%85%AF%E1%86%AB%E1%84%85%E1%85%B5/</url>
      
        <content type="html"><![CDATA[<p>Spring Boot</p><p>Servlet 기반 application이다.</p><ul><li>init</li><li>doGet, doPost</li><li>destory<ul><li>DispatcherServlet<ul><li>초기화시 여러 인터페이스들을 이용한다. (빈을 찾아서 전략으로 사용한다.) 없다면 DispatcherServlet.properties에 있는 기본전략을 사용한다.</li><li>web.xml이 없어도 구현이 가능하다.</li></ul></li></ul></li></ul><p>Servlet Container가 필요하다.</p><ol><li>요청이 DispatcherServlet으로 들어온다.</li><li>interface전략을 사용해서 초기화한다.(각 요청에 대한 bean)</li><li>handlerMapping을 이용하여 handler를 찾아준다.</li><li>handlerAdapter를 이용하여 handlerMapping으로 찾아준 handler를 실행시켜준다.<ul><li>이때 reflection을 이용하여 사용된다.</li></ul></li></ol><p>Spring boot를 사용하지 않으면 @Bean에 들어가는 메소드가 중요하다. 하지만 기본 @Bean이 없다면 DispatcherServlet.properties에 있는 설정들이 들어간다. ViewResolver같은 것을 스스로 등록해야한다. </p><p>Spring boot를 사용하면, java application안에 imbedded tomcat에 servlet을 등록해준다. 기본적인 전략도 boot가 등록해준다. spring boot는 더 많은 것들을 기본 @Bean으로 등록해논다. 가령 ViewResolver와 같은 경우</p><h2 id="HandlerMapping"><a href="#HandlerMapping" class="headerlink" title="HandlerMapping"></a>HandlerMapping</h2><blockquote><h2 id="초기에-initHandlerMappings로-Bean에-등록된-모든-HandlerMapping을-가져온다"><a href="#초기에-initHandlerMappings로-Bean에-등록된-모든-HandlerMapping을-가져온다" class="headerlink" title="초기에 initHandlerMappings로 Bean에 등록된 모든 HandlerMapping을 가져온다."></a>초기에 initHandlerMappings로 Bean에 등록된 모든 HandlerMapping을 가져온다.</h2></blockquote><p>handlerMapping이 등록된 클래스를 돌면서 RequestMappingHandlerMapping.getHandler(request)를 요청한다. 각 클래스(RequestMappingHandlerMapping -&gt; RequestMappingInfoHandlerMapping -&gt; AbstractHandlerMethodMapping<requestmappinginfo> -&gt; AbstractHandlerMapping)</requestmappinginfo></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> HandlerExecutionChain <span class="title">getHandler</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">...</span><br><span class="line">HandlerExecutionChain executionChain = getHandlerExecutionChain(handler, request);</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> HandlerExecutionChain <span class="title">getHandlerExecutionChain</span><span class="params">(Object handler, HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">HandlerExecutionChain chain = (handler <span class="keyword">instanceof</span> HandlerExecutionChain ?</span><br><span class="line">(HandlerExecutionChain) handler : <span class="keyword">new</span> HandlerExecutionChain(handler));</span><br><span class="line"></span><br><span class="line">String lookupPath = <span class="keyword">this</span>.urlPathHelper.getLookupPathForRequest(request);</span><br><span class="line"><span class="keyword">for</span> (HandlerInterceptor interceptor : <span class="keyword">this</span>.adaptedInterceptors) &#123;</span><br><span class="line"><span class="keyword">if</span> (interceptor <span class="keyword">instanceof</span> MappedInterceptor) &#123;</span><br><span class="line">MappedInterceptor mappedInterceptor = (MappedInterceptor) interceptor;</span><br><span class="line"><span class="keyword">if</span> (mappedInterceptor.matches(lookupPath, <span class="keyword">this</span>.pathMatcher)) &#123;</span><br><span class="line">chain.addInterceptor(mappedInterceptor.getInterceptor());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">chain.addInterceptor(interceptor);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> chain;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BeanFactory에 있는 interceptor들은 <code>this.adaptedInterceptors</code>에 들어있다. 이 인터셉터들이 사용자가 요청한 url과 맞는지 확인하여 맞으면 HandlerExceptionChain을 반환한다. 아마 Beanfactory에는 @Controller, @RequestMapping으로 만들어진 Bean들이 있을 것같다. 결국 반환된 HandlerExceptionChain은 DispatcherServlet에서 null인지 아닌지 최종 검사를 하게 되고, 다시 그 <code>HandlerExceptionChain.getHandler()</code> 로 반환된 값을 HandlerAdapter의 param으로 넘김다. </p><p>여기 HandlerExceptionChain에 무언가 chain적인 비밀이 있는 것 같다.</p><h2 id="HandlerAdapter"><a href="#HandlerAdapter" class="headerlink" title="HandlerAdapter"></a>HandlerAdapter</h2><blockquote><p>초기에 Bean에 등록된 모든 HandlerAdapter을 가져온다.</p></blockquote><p>handlerAdapter중에 for문 돌면서 해당 요청에 대한 handlerMapping이용해 찾은 handler를 처리할 수 있는 HandlerAdapter을 찾고, 찾으면 handlerAdapter.handle를 호출한다. (<code>mv = ha.handle(processedRequest, response, mappedHandler.getHandler())</code>)</p>]]></content>
      
      
      <categories>
          
          <category> spring framework </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>test</title>
      <link href="/2019/03/27/test/"/>
      <url>/2019/03/27/test/</url>
      
        <content type="html"><![CDATA[<p><img src="/Users/bagjonghun/Desktop/my-blog/source/_posts/test/listenerAndFilter.png" alt="listenerAndFilter"></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>item8. equals를 재정의할 때는 일반 규약을 따르라</title>
      <link href="/2019/03/27/item8-equals%EB%A5%BC-%EC%9E%AC%EC%A0%95%EC%9D%98%ED%95%A0-%EB%95%8C%EB%8A%94-%EC%9D%BC%EB%B0%98-%EA%B7%9C%EC%95%BD%EC%9D%84-%EB%94%B0%EB%A5%B4%EB%9D%BC/"/>
      <url>/2019/03/27/item8-equals%EB%A5%BC-%EC%9E%AC%EC%A0%95%EC%9D%98%ED%95%A0-%EB%95%8C%EB%8A%94-%EC%9D%BC%EB%B0%98-%EA%B7%9C%EC%95%BD%EC%9D%84-%EB%94%B0%EB%A5%B4%EB%9D%BC/</url>
      
        <content type="html"><![CDATA[<ul><li>instance of</li><li>getClass()</li></ul>]]></content>
      
      
      <categories>
          
          <category> effective java </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>item6. 유효기간이 지난 객체 참조는 폐기하라</title>
      <link href="/2019/03/25/item6-%EC%9C%A0%ED%9A%A8%EA%B8%B0%EA%B0%84%EC%9D%B4-%EC%A7%80%EB%82%9C-%EA%B0%9D%EC%B2%B4-%EC%B0%B8%EC%A1%B0%EB%8A%94-%ED%8F%90%EA%B8%B0%ED%95%98%EB%9D%BC/"/>
      <url>/2019/03/25/item6-%EC%9C%A0%ED%9A%A8%EA%B8%B0%EA%B0%84%EC%9D%B4-%EC%A7%80%EB%82%9C-%EA%B0%9D%EC%B2%B4-%EC%B0%B8%EC%A1%B0%EB%8A%94-%ED%8F%90%EA%B8%B0%ED%95%98%EB%9D%BC/</url>
      
        <content type="html"><![CDATA[<ul><li><p>디스크 페이징</p></li><li><p>obsolete reference</p></li><li><h1 id="GC의-동작원리"><a href="#GC의-동작원리" class="headerlink" title="GC의 동작원리"></a>GC의 동작원리</h1><p>Stop-the-world : GC를 실행하기위해 다른 쓰레드들이 작업을 멈추는 것. 이 시간을 적게 하는 것이 성능을 나타낸다.</p><p>GC는 2가지의 가설에 의해 설계 되었다.</p><pre><code>1. 대부분의 객체는 금방 접근불가능상태가 된다. (객체의 유효기간이 짧다)2. 오래된 객체는 새로 생긴 객체 참조를 적게한다.</code></pre><p>그래서 <strong>HotSpot VM(JVM 종류 중 하나)</strong>에서는 Old, Young영역으로 물리적 공간이 나뉘어 있다.</p></li></ul><h2 id="Young영역"><a href="#Young영역" class="headerlink" title="Young영역"></a>Young영역</h2><blockquote><p>Eden, Survivor, Survivor</p></blockquote><pre><code>1. 새로생긴 객체는 eden에 저장된다.2. GC로 Eden에서 살아남은 객체는 Survivor에 저장된다. 3. 한쪽의 Survivor이 다 차면, 그 중 살아남은 객체는 다른 Survivor에 저장된다.4. 혹은 Old Generation으로 이동한다. 이때 다 차있었던 Survivor은 비어있는 상태가 된다.</code></pre>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">HotSpot VM에서는 빠른 메모리 할당을 위해 2가지를 사용한다.</span><br><span class="line"></span><br><span class="line"><span class="quote">&gt; Bump-the-pointer, TLABs(Thread-Local-Allocation-Buffers)</span></span><br><span class="line"></span><br><span class="line">Bump-the-pointer는 stack처럼 새로운 객체가 할당될때, 맨위에 있는 마지막 객체를 추적해서 Eden에 새로운 객체가 할당될 수 있는지 없는지만 판단한다. 하지만 이는 단일 쓰레드 환경일 때이다. 멀티쓰레드 환경일때는 TLABs를 이용한다.</span><br><span class="line"></span><br><span class="line">멀티쓰레드 환경일때에는 Eden에 저장하려면 lock가 걸릴 수 밖에 없다. 이를 해결한 것이 TLABs이다. 각각의 Thread가 Eden의 덩어리를 갖게 하는 것인데.. 그럼 동기화는 어떻게 하는 걸까?</span><br></pre></td></tr></table></figure><h2 id="Old영역에-대한-GC"><a href="#Old영역에-대한-GC" class="headerlink" title="Old영역에 대한 GC"></a>Old영역에 대한 GC</h2><blockquote><p>기본적으로 데이터가 가득차면 GC를 실행한다. 방식은 5가지 방식이 있다.(JDK 7)</p></blockquote><ul><li>Serial GC - mark-sweep-compact 알고리즘 사용 (코어 수가 적을때 적합)<ol><li>살아있는 객체를 식별</li><li>힙의 앞 부분부터 확인하여 살아있는것만 남긴다. </li><li>살아남은 객체를 힙의 앞으로 쭉땡겨서 객체가 있는 부분과 없는 부분으로 나눈다.</li></ol></li><li>Parallel GC - Serial GC랑 방식은 같으나 GC 쓰레드가 여러개이다. (코어가 많을때 유리)</li><li>Parallel Old GC - ?</li><li>Concurrent Mark &amp; Sweep GC<ol><li><strong>클래스 로더</strong>에서 가까운 객체 중 살아있는 것을 찾는다. </li></ol></li><li>G1(Garbage First) GC</li></ul><h3 id="Serial-GC"><a href="#Serial-GC" class="headerlink" title="Serial GC"></a>Serial GC</h3><ul><li>사용하지 않는 참조들을 null로 바꾸면 GC는 반환해도 좋은 객체인지 판별할 수 있게 된다.</li></ul><ul><li>Background thread</li></ul>]]></content>
      
      
      <categories>
          
          <category> effective java </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>item3 private 생성자나 enum 자료형은 싱글턴 패턴을 따르도록 설계하라</title>
      <link href="/2019/03/20/item3-private-%EC%83%9D%EC%84%B1%EC%9E%90%EB%82%98-enum-%EC%9E%90%EB%A3%8C%ED%98%95%EC%9D%80-%EC%8B%B1%EA%B8%80%ED%84%B4-%ED%8C%A8%ED%84%B4%EC%9D%84-%EB%94%B0%EB%A5%B4%EB%8F%84%EB%A1%9D-%EC%84%A4%EA%B3%84%ED%95%98%EB%9D%BC/"/>
      <url>/2019/03/20/item3-private-%EC%83%9D%EC%84%B1%EC%9E%90%EB%82%98-enum-%EC%9E%90%EB%A3%8C%ED%98%95%EC%9D%80-%EC%8B%B1%EA%B8%80%ED%84%B4-%ED%8C%A8%ED%84%B4%EC%9D%84-%EB%94%B0%EB%A5%B4%EB%8F%84%EB%A1%9D-%EC%84%A4%EA%B3%84%ED%95%98%EB%9D%BC/</url>
      
        <content type="html"><![CDATA[<ul><li>Reflection</li><li>Serializable</li><li>Transient</li></ul>]]></content>
      
      
      <categories>
          
          <category> effective java </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>IoC Container 신석기시대</title>
      <link href="/2019/03/16/IoC-Container-%E1%84%89%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A5%E1%86%A8%E1%84%80%E1%85%B5-%E1%84%89%E1%85%B5%E1%84%83%E1%85%A2/"/>
      <url>/2019/03/16/IoC-Container-%E1%84%89%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A5%E1%86%A8%E1%84%80%E1%85%B5-%E1%84%89%E1%85%B5%E1%84%83%E1%85%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="IoC-Container란"><a href="#IoC-Container란" class="headerlink" title="IoC Container란?"></a>IoC Container란?</h2><p>우선 Container는 무언가를 주체적으로 관리한다. 예를 들어 Servlet Container는 Servlet의 생성 소멸 등을 관리한다. 그리고 IoC란 제어의 역전 즉, 기존에 Client가 객체를 생성하고 소멸시킨(소멸은 GC가 한다) 일들을 Container가 한다는 것이다. 그럼 어떤것이 할까? Application Context가 한다. Application Context에 bean을 등록시켜서 Container가 관리할 수 있게 해준다. 이 ApplciaitonContext가 생성, 소멸할때 발생하는 이벤트를 받는 것이 ContextLoaderListener이고 이때 ContextLoaderListener이 ContextLoader를 실행시켜서 필요한 이벤트를 발생시킨다. 이 ContextLoader에 각종 param을 넣어줄 수 가 있다. </p><p>IoC Container는 2가지가 있다.</p><ol><li>BeanFactory</li><li>ApplicationContext</li></ol><p>BeanFactory가 Bean을 만든다.(@Component annotaion이 붙은 것이라든지…등) 여러번 호출되는 요청을 요청마다 인스턴스를 만들 면 손해이므로 한번만 만들고 만들어진 인스턴스를 재사용한다. 이것이 Bean으로 만드는 것의 이점이다. 이처럼 자동으로 인스턴스를 만들고 사용이 끝난 인스턴스는 알아서 없애준다. 이는 IoC Container의 역할이다. </p><p><br></p><h3 id="Context-Loader-Listener"><a href="#Context-Loader-Listener" class="headerlink" title="Context-Loader-Listener"></a>Context-Loader-Listener</h3><p><img src="https://docs.spring.io/spring/docs/current/spring-framework-reference/images/mvc-context-hierarchy.png" alt="image"></p><p>ApplicationContext 생성될때, ContextLoaderListener가 호출된다. (여기서 Root ApplicationContext는 다른 Servlet에서 공유할 수 있다.) 그러면 dispatcher-servlet는 Root webApplicationContext를 상속해서, dispatcher-servlet안에서만 쓸 수 있는 webApplicationContext를 만든다. </p><p>즉 ContextLoaderListner은 두개의 dispatcherServlet에서 공유가능한 Root ApplicationContext가 생성될 때 이벤트를 발생시킨다.</p><blockquote><p>Root webApplicationContext는 ApplicationContext를 상속받는다.</p></blockquote><p>Spring의 root webApplicationContext가 start up, shut down될떄 사용하는 bootstrap listener?(bootstrap - 외부의 입력없이 스스로 실행되는 것)</p><h3 id="Context-Loader"><a href="#Context-Loader" class="headerlink" title="Context-Loader"></a>Context-Loader</h3><p>ContextLoader는 WebApplicationContext를 생성하는 class이다. 이를 상속해서 WebApplicationContext가 생성될때 호출되는 함수가 ContextLoaderListener에 속해있다. </p><p>WebApplicationContext는 생성되면서 여러가지 설정값을 을 넣어줄 수 있는데, 그때 <strong>contextClass</strong>를 param으로 넣을 수 있다. 이때 들어가는 contextClass가 <strong>AnnotationConfigWebApplicationContext은</strong>이다. 이는 WebApplicationContext의 구현체로 annotation이 붙은 클래스를(<figure class="highlight plain"><figcaption><span>input으로 사용하게 해준다.</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ContextLoaderListener이 AnnotationConfigWebApplicationContext 설정값을 가지고, RootWebApplicationContext를 만들고, DispatcherServlet은 servlet-context.xml을 가지고 각각의 ApplicationContext를 만든다. 이 ApplicationContext는 Root WebApplicationContext를 상속한다.</span><br><span class="line"></span><br><span class="line">### AnnotationConfigWebApplicationContext</span><br><span class="line"></span><br><span class="line">```xml</span><br><span class="line">&lt;!--web.xml--&gt;</span><br><span class="line">&lt;context-param&gt;</span><br><span class="line">    &lt;param-name&gt;contextClass&lt;/param-name&gt;</span><br><span class="line">    &lt;param-value&gt;org.springframework.web.context.support.AnnotationConfigWebApplicationContext&lt;/param-value&gt;</span><br><span class="line">&lt;/context-param&gt;</span><br></pre></td></tr></table></figure></p><p>여기서 contextClass는 ContextLoader의 예약어이다. ContextLoader는 contextClass라는 이름을 가진 param을 읽어온다. 그래서 @Configuration annotation이 붙은 함수를 읽어와서 설정파일로 만들어 준다. </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ContextLoader.java</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; determineContextClass(ServletContext servletContext) &#123;</span><br><span class="line">    String contextClassName = servletContext.getInitParameter(<span class="string">"contextClass"</span>);</span><br><span class="line">    <span class="keyword">if</span> (contextClassName != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Cla...</span><br></pre></td></tr></table></figure><p><br></p><h3 id="contextConfigLocation"><a href="#contextConfigLocation" class="headerlink" title="contextConfigLocation"></a>contextConfigLocation</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--web.xml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>me.jjjpark.AppConfig<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure><p>말 그대로 Context의 Config파일의 위치를 알려주는 것이다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ContextLoader.java</span></span><br><span class="line">...</span><br><span class="line">    wac.setServletContext(sc);</span><br><span class="line">    configLocationParam = sc.getInitParameter(<span class="string">"contextConfigLocation"</span>);</span><br><span class="line">    <span class="keyword">if</span> (configLocationParam != <span class="keyword">null</span>) &#123;</span><br><span class="line">    wac.setConfigLocation(configLocationParam);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="불편한-점"><a href="#불편한-점" class="headerlink" title="불편한 점"></a>불편한 점</h2><p>이제 Servlet이 불편한 점은 /url 하나가 추가될 때마다 서블릿 설정이 추가된다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>me.jjjpark.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> spring framework </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>SpringMVC 청동기시대</title>
      <link href="/2019/03/15/SpringMVC-%E1%84%8E%E1%85%A5%E1%86%BC%E1%84%83%E1%85%A9%E1%86%BC%E1%84%80%E1%85%B5-%E1%84%89%E1%85%B5%E1%84%83%E1%85%A2/"/>
      <url>/2019/03/15/SpringMVC-%E1%84%8E%E1%85%A5%E1%86%BC%E1%84%83%E1%85%A9%E1%86%BC%E1%84%80%E1%85%B5-%E1%84%89%E1%85%B5%E1%84%83%E1%85%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="DispatcherServlet-java"><a href="#DispatcherServlet-java" class="headerlink" title="DispatcherServlet.java"></a>DispatcherServlet.java</h2><blockquote><p>기존의 URL 요청하나마다 Servlet을 만들어줘야 하는 번거로움이 있었는데, 이를 해결한것이 dispatcherServlet이다. 모든 URL요청을  dispatcherServlet에 넘기고 각 요청에 맞는 결과를 반환한다.</p></blockquote><p><img src="https://justforchangesake.files.wordpress.com/2014/05/spring-request-lifecycle.jpg" width="450px"></p><p>출처: <a href="https://justforchangesake.files.wordpress.com/2014/05/spring-request-lifecycle.jpg" target="_blank" rel="noopener">https://justforchangesake.files.wordpress.com/2014/05/spring-request-lifecycle.jpg</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--web.xml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>app<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextClass<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>org.springframework.web.context.support.AnnotationConfigWebApplicationContext<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>me.jjjpark.WebConfig<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>요청 처리과정</p></blockquote><ol><li><p>요청을 분석해서 multipart인지? 뭐 다른 요청인지 요청을 분석한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//dispatcherServlet.java</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doDispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">   processedRequest = checkMultipart(request);</span><br><span class="line">   multipartRequestParsed = (processedRequest != request);</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li><li><p>요청을 처리할 수 있는 핸들러를 찾아온다.(handlerMapping - interface)</p><p>요청이 /app/hello라고 했을때, 이 요청은 @RequestMapping의 @GetMapping(“/hello”)에서 처리할 수 있다. 그래서 RequestMappingHandlerMapping이 처리할 것이다.</p><ul><li>BeanNameUrlHandlerMapping</li><li>RequestMappingHandlerMapping - @Controller안의 @RequestMapping이 붙은 method-level로 부터 <strong>RequestMappingInfo</strong> instance를 생성한다.</li></ul></li><li><p>handler를 실행할 수 있는 handlerAdapter을 찾아온다.</p><ul><li>HttpRequestHandlerAdapter</li><li>SimpleControllerHandlerAdapter</li><li>RequestMappingHandlerAdapter</li></ul></li><li><p>java의 reflection을 이용하여 handlerMethod를 실행 <code>invokeHandlerMethod(request, response, handlerMethod)</code></p></li><li><p>Return값을 처리할 수 있는, HandlerMethodReturnValueHandler를 찾는다.</p></li></ol><h3 id="View가-있을-경우-DispatcherServlet-2부"><a href="#View가-있을-경우-DispatcherServlet-2부" class="headerlink" title="View가 있을 경우 (DispatcherServlet 2부)"></a>View가 있을 경우 (DispatcherServlet 2부)</h3>]]></content>
      
      
      <categories>
          
          <category> spring framework </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Servlet 동작원리 구석기시대</title>
      <link href="/2019/03/08/Servlet-%E1%84%83%E1%85%A9%E1%86%BC%E1%84%8C%E1%85%A1%E1%86%A8%E1%84%8B%E1%85%AF%E1%86%AB%E1%84%85%E1%85%B5-%E1%84%80%E1%85%AE%E1%84%89%E1%85%A5%E1%86%A8%E1%84%80%E1%85%B5-%E1%84%89%E1%85%B5%E1%84%83%E1%85%A2/"/>
      <url>/2019/03/08/Servlet-%E1%84%83%E1%85%A9%E1%86%BC%E1%84%8C%E1%85%A1%E1%86%A8%E1%84%8B%E1%85%AF%E1%86%AB%E1%84%85%E1%85%B5-%E1%84%80%E1%85%AE%E1%84%89%E1%85%A5%E1%86%A8%E1%84%80%E1%85%B5-%E1%84%89%E1%85%B5%E1%84%83%E1%85%A2/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>IDE</strong> - intellij, <strong>Build tool</strong> - maven, <strong>Archetype</strong> - maven-webapp</p></blockquote><h1 id="Servlet-project"><a href="#Servlet-project" class="headerlink" title="Servlet project"></a>Servlet project</h1><ol><li><p>pom.xml에 우리가 사용할 java servlet을 추가 해주었다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>Main-java-me.jjjpark 패키지를 만든다. 그리고, HelloServlet를 작성해 주었다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"init()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"doGet"</span>);</span><br><span class="line">        resp.getWriter().println(<span class="string">"&lt;html&gt;"</span>);</span><br><span class="line">        resp.getWriter().println(<span class="string">"&lt;body&gt;"</span>);</span><br><span class="line">        resp.getWriter().println(<span class="string">"&lt;h1&gt;Hello Servlet~!&lt;/h1&gt;"</span>);</span><br><span class="line">        resp.getWriter().println(<span class="string">"&lt;/body&gt;"</span>);</span><br><span class="line">        resp.getWriter().println(<span class="string">"&lt;/html&gt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"destroy()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>여기서 init(), destroy() method는 HttpServlet의 super class인 <strong>GenericServlet</strong>의 메소드 이다. <strong>HttpServlet</strong>은 <strong>GenericServlet</strong>에서 Http기능을 추가해 구현한 클래스이다.</p></li></ol><ol start="3"><li><p>방금 만든 Servlet을 web.xml에 등록해준다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE web-app PUBLIC</span></span><br><span class="line"><span class="meta"> "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"</span></span><br><span class="line"><span class="meta"> "http://java.sun.com/dtd/web-app_2_3.dtd" &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>me.jjjpark.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>그리고 실행한 후 <a href="http://localhost:8080/hello로" target="_blank" rel="noopener">http://localhost:8080/hello로</a> 요청을 보내면 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">init() <span class="comment">// 처음에 한번 생성된다.</span></span><br><span class="line">doGet()</span><br><span class="line">destory() <span class="comment">// when tomcat shutdown</span></span><br></pre></td></tr></table></figure><ul><li>?? SrpingMvc lifecycle 도는 코드 보기</li></ul><h2 id="Servlet-Listener-amp-Servlet-Filter"><a href="#Servlet-Listener-amp-Servlet-Filter" class="headerlink" title="Servlet Listener &amp; Servlet Filter"></a>Servlet Listener &amp; Servlet Filter</h2><p><img src="https://github.com/jjjpark/draw-io-images/blob/master/listenerFilter.png?raw=true" alt="image"></p><h3 id="Servlet-Listener"><a href="#Servlet-Listener" class="headerlink" title="Servlet Listener"></a>Servlet Listener</h3><ul><li>Context의 attribute, life cycle의 변화에 따라 이벤트를 발생 시킨다.</li><li>여러 Servlet에서 공통적으로 사용되는 것을 Servlet Context에 넣어 놓고, servlet이 가져다 쓸 수 있다. </li><li>Servlet Container가 구동되고, Servlet Context가 만들어지면 Servlet Listener의 <figure class="highlight plain"><figcaption><span>sce)```가 실행된다. 그리고 servlet이 destroyed된 후에 ```contextDestroye(ServletContextEvent sce)``` 가 실행된다. 이 처럼 Listener는 Context의 상태를 보고 있다가 변화가 감지되면 이벤트를 발생시킨다. 그래서 이때, Context에 param같은 것을 설정해줄 수 있게 된다.</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1. MyListener.java를 만든다.</span><br><span class="line"></span><br><span class="line">   ```java</span><br><span class="line">   public class MyListener implements ServletContextListener &#123;</span><br><span class="line">       @Override</span><br><span class="line">       public void contextInitialized(ServletContextEvent sce) &#123;</span><br><span class="line">           System.out.println(&quot;Context Initialized&quot;);</span><br><span class="line">           sce.getServletContext().setAttribute(&quot;name&quot;, &quot;jhoon&quot;);</span><br><span class="line">       &#125;</span><br><span class="line">   </span><br><span class="line">       @Override</span><br><span class="line">       public void contextDestroyed(ServletContextEvent sce) &#123;</span><br><span class="line">           System.out.println(&quot;Context Destroyed&quot;);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li><p>web.xml에 등록한다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE web-app PUBLIC</span></span><br><span class="line"><span class="meta"> "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"</span></span><br><span class="line"><span class="meta"> "http://java.sun.com/dtd/web-app_2_3.dtd" &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>me.jjjpark.MyListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>me.jjjpark.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="Servlet-Filter"><a href="#Servlet-Filter" class="headerlink" title="Servlet Filter"></a>Servlet Filter</h3><ul><li>아무것도 안해도 Filter는 init이 된다.</li><li>사용자한테 요청이 들어왔을 때, Servlet의 init() method를 실행 시키고 Filter갔다가 doGet(Servlet)에게 간다.</li><li>Servlet, Filter, Listener 순으로 detroyed 된다.</li><li>filter-mapping를 통해 여러 Servlet에 Filter를 적용할 수 있고, url-pattern을 통해 url을 기준으로 삼을 수 있다.( 여러개의 servlet에 filter를 적용해야 할 경우 이용한다. )</li><li>vs HandlerAdapter - interceptor</li></ul><p>만들기 순서 (구동 순서 아님)</p><ol><li><p>MyFilter.java를 만든다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Filter init"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Filter"</span>);</span><br><span class="line">        filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Filter Destroy"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>doFilter에서 Filter는 chainning하여 실행되므로 다음 Filter에게 param을 넘겨야 한다.</p></li></ol><ol start="2"><li><p>web.xml에 추가한다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE web-app PUBLIC</span></span><br><span class="line"><span class="meta"> "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"</span></span><br><span class="line"><span class="meta"> "http://java.sun.com/dtd/web-app_2_3.dtd" &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>myFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>me.jjjpark.MyFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>myFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>me.jjjpark.MyListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>me.jjjpark.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="Servlet-Context"><a href="#Servlet-Context" class="headerlink" title="Servlet Context"></a>Servlet Context</h3><ul><li>Servlet보다 먼저 생성된다. 그리고 나중에 destoryed 된다. 여러 Servlet에서 사용되는 공통적인 것을 모아 놓는다. 가령 DB Connection같은 경우</li><li>Servlet는 HttpServlet을 상속하고, HttpServlet은 GenericServlet을 상속하는데 GenericServlet는 getServletContext()를 구현하고 있어서 Servlet에서 getServletContext() 메소드를 사용할 수 있다.</li><li>GenericServlet이 init될 때, ServletConfig를 parameter로 받아 Config를 저장한다.</li></ul>]]></content>
      
      
      <categories>
          
          <category> spring Framework </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Bean 설정</title>
      <link href="/2019/03/07/%E1%84%89%E1%85%A5%E1%86%AF%E1%84%8C%E1%85%A5%E1%86%BC%20Spring-Bean-%E1%84%89%E1%85%A5%E1%86%AF%E1%84%8C%E1%85%A5%E1%86%BC/"/>
      <url>/2019/03/07/%E1%84%89%E1%85%A5%E1%86%AF%E1%84%8C%E1%85%A5%E1%86%BC%20Spring-Bean-%E1%84%89%E1%85%A5%E1%86%AF%E1%84%8C%E1%85%A5%E1%86%BC/</url>
      
        <content type="html"><![CDATA[<p>기존 설정은 WebConfig.java에 @Bean을 이용하여 직접 handelerMapping, handlerAdaptor 설정했다. WebConfig에 따로 설정하지 않으면, dispatcherServlet.properties에서 가져온다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HandlerMapping <span class="title">handlerMapping</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RequestMappingHandlerMapping handlerMapping = <span class="keyword">new</span> RequestMappingHandlerMapping();</span><br><span class="line">        handlerMapping.setInterceptors(); <span class="comment">// 각각의 설정들</span></span><br><span class="line">        <span class="keyword">return</span> handlerMapping;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@EnableWebMvc를 이용하면 기본적인 설정이 들어있다. (Delegation 구조로 되어있다.)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이는 Delegation구조로 되어 있기 때문에 사용자에게 WebMvcConfigurer라는 인터페이스를 제공한다. 사용자는 그래서 자유롭게 조작할 수 있다.</p><p><code>implement WebMvcConfigurer</code> Spring boot에서도 사용한다.</p>]]></content>
      
      
      <categories>
          
          <category> spring framework </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>왜 Spring인가?</title>
      <link href="/2019/03/05/%EC%99%9C-Spring%EC%9D%B8%EA%B0%80/"/>
      <url>/2019/03/05/%EC%99%9C-Spring%EC%9D%B8%EA%B0%80/</url>
      
        <content type="html"><![CDATA[<ol><li><p>라이브러리 사용을 위해 jar을 직접 넣어주지 않고, maven이나 gradle로 관리한다.</p></li><li><p>계정 정보와 같은 설정정보들을 servlet-context.xml에서 공통으로 관리할 수 있다.</p><ul><li><p>servlet-context.xml - web application요청을 받기 위한 controller나 view(View Resolver)를 어떻게 처리할 것인지 설정하는 파일</p></li><li><p>root-context.xml - Business layer를 관리하기 위한 설정 (DB와 관련된 공통으로 사용할 수 있는 설정)</p></li><li><p>위 두 context는 DispatcherServlet안에서 적용된다.</p><hr><h3 id="DispatcherServlet"><a href="#DispatcherServlet" class="headerlink" title="DispatcherServlet"></a>DispatcherServlet</h3><blockquote><p>front controller pattern을 사용하여 처리 로직을 공유한다. 실제 일은 설정할 수 있는 대표 component에 의해서 수행된다. 그래서 DispatcherServlet는 xml이나 java로 선언이 되어져야 한다.</p></blockquote><p>DispatcherServlet는 WebApplicationContext( ApplicationContext가 확장된 것)으로 설정한다. WebApplicationContext는 연관된 Servelet Context, Servlet사이의 링크를 가지고 있다.  대부분의 application은 WebApplicationContext하나만으로 충분하다. 하지만 좀 자세히 들여다 보면 <strong>Root WebApplicationContext</strong>가 있다.</p><p><strong>Root WebApplicationContext</strong>는 다른 여러 DispatcherServlet와 공유해서 사용할 수 있고, 자식 WebApplicationContext를 가질 수도 있다.</p><p><strong>Root WebApplicationContext</strong>는 보통 repositories, business services와 같은 다른 다양한 Servlet과 공유할 수 있는 Servlet을 가지고 있다.</p></li></ul></li></ol><pre><code>### 1.1.3 Web MVC ConfigDispatcherServlet은 request를 처리해서 적절한 response로 넘겨줄 특별한 beans이 있다.Application은 request를 처리하기 위해 Special Bean Type의 Beans을 선언한다. DispatcherServlet은 special bean을 WebApplicationContext에서 찾고, 없으면 ```DispatcherServlet.properties```에 있는 것을 반환한다.### 1.1.4. Servlet Config### 1.1.5. ProcessingDispatcherServlet는 다음과 같이 동작한다:- WebApplicationContext에서 요청과 관련된 controller나 다른 elements를 찾는다.</code></pre><h2 id="다시-돌아와서"><a href="#다시-돌아와서" class="headerlink" title="다시 돌아와서"></a>다시 돌아와서</h2><p>서블릿 컨테이너 ( 웹 컨테이너, WAS, tomcat )</p><blockquote><p>서블릿을 웹서버에 올리기만 하면 처리할 수 없는데, 이 서블릿을 관리해주는 컨테이너가 서블릿 컨테이너 이다. 서블릿 컨테이너는 서블릿 클래스의 인스턴스화, 초기화를 시킨다. 그리고 clinent의 요청에 따라 적절한 servlet을 mapping시켜준다. (이때 web.xml을 참고하여 적절한 servlet를 mapping시켜준다.) servlet이 사망하면 GC를 실행시켜준다.</p></blockquote><p>또 Tomcat이 우리가 작성한 java파일을 class로 만들어서 메모리에 올려준다.</p><p>서블릿 컨테이너는 요청이 올떄마다 서블릿을 생성하는것이 아니라, 기존에 만들어 졌던것을 다시 사용한다. </p><p>그리고 요청마다 쓰레드를 생성하기 때문에 동시에 여러 클라이언트의 요청을 처리할 수 있다. </p><p>서블릿은 처음에 딱한번 init() 메소드를 실행한다. 그래서 딱 한번만 실행해도 되는 것은 여기에서 실행한다. 웹 컨테이너(톰캣)을 이용할 때, 첫 요청의 init()이 굉장히 오래걸릴 수 있어서 웹 컨테이너가 로드될때init()작업을 실행해줄 수 있는데, 이때 web.xml에 설정해주면 된다. web.xml은 웹 컨테이너가 적절한 servlet를 찾을 수 있도록 하는 xml파일이다.</p><h2 id="Spring-Container-IoC-Container-DI-Container…"><a href="#Spring-Container-IoC-Container-DI-Container…" class="headerlink" title="Spring Container(IoC Container, DI Container…)"></a>Spring Container(IoC Container, DI Container…)</h2><p><img src="https://img1.daumcdn.net/thumb/R1920x0/?fname=http%3A%2F%2Fcfile24.uf.tistory.com%2Fimage%2F2236F14757BBD251199156" alt="image"></p><p>이처럼 SpringMVC도 Servlet Container가 관리하는 servlet이다.SpringMVC로의 모든 요청과 응답은 DispatcherServlet이 처리한다.  (front controller parttern) </p><ol><li>URL요청이 온다.</li><li>DispatcherServlet은 HandlerMapping를 통해 알맞은 Handler를 찾는다. </li><li>HandlerAdapter로 찾은 Handler를 실행 시켜준다.</li></ol><p>POJO와 configuration들을 Spring Container에 주입하면 POJO는 Bean으로 등록된고 사용할 수 있게 된다. 여기서 Bean은 싱글톤이다.</p><p>Spring Container는 2가지 유형의 Container를 제공한다. </p><ol><li>BeanFactory</li><li>ApplicationContext -&gt; BeanFactory (ApplicationContext는 BeanFactory를 상속받는다.)</li></ol><p><strong>BeanFactory</strong>는 applicationContext.xml에 있는 bean들을 생성하고 관리한다. 또한 clinent로 부터 요청이 들어올때 객체를 생성한다.( Lazy-loading )</p><p>이를 확장한 것이 <strong>ApplicationContext</strong> <strong>Container</strong>이다. 트랜잭션관리나 다국어처리와 같은 확장된 기능을 담당한다.</p><p>즉, Spring Container는 xml에 있는 Bean 설정들을 이용해 Bean을 생성하고 관리한다.</p><h3 id="IoC란-제어의-역전이다-왜-제어의-역전일까"><a href="#IoC란-제어의-역전이다-왜-제어의-역전일까" class="headerlink" title="IoC란 제어의 역전이다. 왜 제어의 역전일까?"></a>IoC란 제어의 역전이다. 왜 제어의 역전일까?</h3><p>기존에 로봇 class안에 로봇이 공격할 수 있는 패턴에 대한 함수들이 있었다. 그래서 사용자가 새로운 공격을 할려면 <strong>직접</strong> 함수를 추가해 주어야 했다. 하지만 IoC는 이미 공격 전략들을 다 만들어 놓고, applicationContext라는 곳에 공격전략(beans.xml)을 넣어주면 applicationContext안에서 생성자를 이용하거나, 혹은 setter를 이용해서 알아서 다 만들어준다. 그리고 사용자의 applicationContext의 getBean이라는 메소드를 이용하여 이미 만들어진 Bean을 사용할 수 있기 떄문에 제어의 역전이라고 부른다.</p><h3 id="DI-의존성-주입"><a href="#DI-의존성-주입" class="headerlink" title="DI - 의존성 주입"></a>DI - 의존성 주입</h3><p>의존성이란? class A 내부에서 <code>new B()</code>로 새로운 객체를 만들어 주었다면 둘은 의존관계를 갖는다. 이 의존성을 내부가 아닌 외부에서 넣어주는 것을 의존성 주입이라고 한다. 의존성을 주입하는 방법에는 여러가지가 있다.</p><ol><li>xml을 이용한 주입<ul><li>생성자를 이용</li><li>setter method를 이용</li></ul></li><li>@Autowired annotation을 이용한 주입</li></ol><p>그렇다면 DI는 왜 하는 것일까?</p>]]></content>
      
      
      <categories>
          
          <category> spring framework </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>javascript Strategy pattern 적용하기</title>
      <link href="/2018/12/12/javascript-Strategy-pattern-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0/"/>
      <url>/2018/12/12/javascript-Strategy-pattern-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0/</url>
      
        <content type="html"><![CDATA[<p>JSbridge개발 도중, 새로운 native의 기능이 추가될 때마다 javascript를 수정하는 일이 빈번하게 발생했다. 예를 들어 카메라를 불러오는 code를 작성고, 새롭게 마이크를 불러오는 code를 작성하는 경우 이다.</p><p>처음 허접같아 보이는 코드는 다음과 같다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> call = <span class="function"><span class="keyword">function</span>(<span class="params">funcName, options</span>)</span>&#123;</span><br><span class="line">    jsWebview.call(funcName, options, <span class="string">'null'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"toastBtn"</span>);</span><br><span class="line"><span class="keyword">var</span> thumImg = <span class="built_in">document</span>.getElementById(<span class="string">"thumbnailImg"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> showThumnail = <span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line">    thumImg.children[<span class="number">0</span>].children[<span class="number">0</span>].src =response;</span><br><span class="line">    call(<span class="string">"showToast"</span>, <span class="string">"11"</span>, <span class="string">"null"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">btn.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    showThumnail();</span><br><span class="line">    <span class="keyword">var</span> val = <span class="built_in">document</span>.getElementById(<span class="string">"email"</span>).value;</span><br><span class="line">    <span class="built_in">console</span>.log(val);</span><br><span class="line">    call(<span class="string">'showToast'</span>, val , <span class="string">'null'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">thumImg.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   call(<span class="string">"takePicture"</span>, <span class="string">'null'</span>, <span class="string">'null'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>JSbridge역할을 하는 함수를 공통으로 만들고, 각 event가 발생할 때마다 호출한다. 그리고 showThumnail이라는 native로 부터 callback을 받는 부분을 따로 만들어 준다. </p><p>코드의 가독성이 떨어지고, 유지보수가 힘들고, javascript 처음 짜본사람처럼 보인다. </p><p>그래서, strategy pattern을 이용하여, 개선하게 되었다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*********************************************************</span></span><br><span class="line"><span class="comment">    Context</span></span><br><span class="line"><span class="comment">**********************************************************/</span> </span><br><span class="line"><span class="keyword">var</span> AndroidNative = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.androidFunc = <span class="string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">AndroidNative.prototype.setStrategy = <span class="function"><span class="keyword">function</span> (<span class="params">androidFunc</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.androidFunc = androidFunc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">AndroidNative.prototype.excute = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.androidFunc.excute();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*********************************************************</span></span><br><span class="line"><span class="comment">    Strategy</span></span><br><span class="line"><span class="comment">**********************************************************/</span> </span><br><span class="line"><span class="keyword">var</span> Camera = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.thumImg = <span class="built_in">document</span>.getElementById(<span class="string">"thumbnailImg"</span>);</span><br><span class="line">    <span class="keyword">this</span>.thumText = <span class="built_in">document</span>.getElementById(<span class="string">"thumbnailText"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.excute = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//generate trx_id</span></span><br><span class="line">        <span class="keyword">return</span> jsWebview.call(<span class="string">"takePicture"</span>, <span class="string">"null"</span>, <span class="string">"null"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Callback</span></span><br><span class="line">    <span class="keyword">this</span>.showThumnail = <span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.thumImg.src = <span class="string">"data:image/png;base64, "</span> + response;</span><br><span class="line">        <span class="keyword">this</span>.thumText.innerHTML = <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Toast = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.message = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">this</span>.btn = <span class="built_in">document</span>.getElementById(<span class="string">"toastBtn"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.setMessage = <span class="function"><span class="keyword">function</span> (<span class="params">message</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.excute = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jsWebview.call(<span class="string">"showToast"</span>, <span class="keyword">this</span>.message, <span class="string">"null"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*********************************************************</span></span><br><span class="line"><span class="comment">    Client</span></span><br><span class="line"><span class="comment">**********************************************************/</span> </span><br><span class="line"><span class="keyword">var</span> androidNative = <span class="keyword">new</span> AndroidNative();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> toast = <span class="keyword">new</span> Toast();</span><br><span class="line"><span class="keyword">var</span> camera = <span class="keyword">new</span> Camera();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">toast.btn.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> val = <span class="built_in">document</span>.getElementById(<span class="string">"email"</span>).value;</span><br><span class="line">    toast.setMessage(val);</span><br><span class="line"></span><br><span class="line">    androidNative.setStrategy(toast);</span><br><span class="line">    androidNative.excute();</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">camera.thumImg.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    androidNative.setStrategy(camera);</span><br><span class="line">    androidNative.excute();</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>사용할 기능의 이름을 가진 객체를 만들어 그 내부에서 callback이나 DOM조작을 위한 객체들을 관리한다. androidNative는 Strategy pattern에서 Context역할을 한다.</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Spring S3 연동하기</title>
      <link href="/2018/12/07/Spring-S3-%EC%97%B0%EB%8F%99%ED%95%98%EA%B8%B0/"/>
      <url>/2018/12/07/Spring-S3-%EC%97%B0%EB%8F%99%ED%95%98%EA%B8%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.amazonaws/aws-java-sdk --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.amazonaws<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aws-java-sdk<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="FileUploadController-java"><a href="#FileUploadController-java" class="headerlink" title="FileUploadController.java"></a>FileUploadController.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewFileUploadController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(NewFileUploadController.class);</span><br><span class="line"></span><br><span class="line">    S3Util s3 = <span class="keyword">new</span> S3Util();</span><br><span class="line">    String bucketName = <span class="string">"bucketName"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/upload"</span>, method = RequestMethod.POST, produces = <span class="string">"text/plain;charset=UTF-8"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">uploadImage</span><span class="params">(MultipartFile file)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        </span><br><span class="line">        String uploadpath = <span class="string">"assetList"</span>;</span><br><span class="line"></span><br><span class="line">        ResponseEntity&lt;String&gt; img_path = <span class="keyword">new</span> ResponseEntity&lt;&gt;(</span><br><span class="line">                UploadFileUtils.uploadFile(uploadpath, file.getOriginalFilename(), file.getBytes()),</span><br><span class="line">                HttpStatus.CREATED);</span><br><span class="line"></span><br><span class="line">        String certificatePath = (String) img_path.getBody();</span><br><span class="line">        <span class="keyword">return</span> certificatePath;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="S3Utill-java"><a href="#S3Utill-java" class="headerlink" title="S3Utill .java"></a>S3Utill .java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">S3Util</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String accessKey = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">private</span> String secretKey = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">private</span> AmazonS3 conn;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// connection 맺는 생성자</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">S3Util</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        AWSCredentials credentials = <span class="keyword">new</span> BasicAWSCredentials(accessKey, secretKey);</span><br><span class="line">        ClientConfiguration clientConfig = <span class="keyword">new</span> ClientConfiguration();</span><br><span class="line">        clientConfig.setProtocol(Protocol.HTTP);</span><br><span class="line">        <span class="keyword">this</span>.conn = <span class="keyword">new</span> AmazonS3Client(credentials, clientConfig);</span><br><span class="line">        conn.setEndpoint(<span class="string">"s3.ap-northeast-2.amazonaws.com"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// fileUpload 메서드</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fileUpload</span><span class="params">(String bucketName, String fileName, <span class="keyword">byte</span>[] fileData)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        String filePath = (fileName).replace(File.separatorChar, <span class="string">'/'</span>);</span><br><span class="line">        ObjectMetadata metadata = <span class="keyword">new</span> ObjectMetadata();</span><br><span class="line"></span><br><span class="line">        metadata.setContentLength(fileData.length);</span><br><span class="line">        ByteArrayInputStream byteArrayInputStream = <span class="keyword">new</span> ByteArrayInputStream(fileData);</span><br><span class="line"></span><br><span class="line">        conn.putObject(bucketName, filePath, byteArrayInputStream, metadata);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="UploadFileUtils-java"><a href="#UploadFileUtils-java" class="headerlink" title="UploadFileUtils.java"></a>UploadFileUtils.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadFileUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(UploadFileUtils.class);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">uploadFile</span><span class="params">(String uploadPath, String savedName, String originalName, <span class="keyword">byte</span>[] byteData)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        S3Util s3 = <span class="keyword">new</span> S3Util();</span><br><span class="line">        String bucketName = <span class="string">"bucketName"</span>;</span><br><span class="line"></span><br><span class="line">        String uploadedFileName = <span class="keyword">null</span>;</span><br><span class="line">        uploadedFileName = savedName.replace(File.separatorChar, <span class="string">'/'</span>);</span><br><span class="line"></span><br><span class="line">        s3.fileUpload(bucketName, uploadPath+<span class="string">"/"</span>+uploadedFileName, byteData);</span><br><span class="line"></span><br><span class="line">        logger.info(uploadedFileName);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> uploadedFileName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="FileUploadController-java-1"><a href="#FileUploadController-java-1" class="headerlink" title="FileUploadController.java"></a>FileUploadController.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewFileUploadController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    S3Util s3 = <span class="keyword">new</span> S3Util();</span><br><span class="line">    String bucketName = <span class="string">"hybridbucket"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/fileUpload"</span>, method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">uploadAjaxCertificate</span><span class="params">(MultipartFile file)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        </span><br><span class="line">        String uploadpath = <span class="string">"user_image"</span>;</span><br><span class="line">        ResponseEntity&lt;String&gt; img_path = <span class="keyword">new</span> ResponseEntity&lt;&gt;(</span><br><span class="line">                UploadFileUtils.uploadFile(uploadpath, file.getOriginalFilename(), file.getBytes()),</span><br><span class="line">                HttpStatus.CREATED);</span><br><span class="line"></span><br><span class="line">        String certificatePath = (String) img_path.getBody();</span><br><span class="line">        logger.info(certificatePath);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> certificatePath;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="출처"><a href="#출처" class="headerlink" title="출처"></a>출처</h2><p><a href="https://shj7242.github.io/2017/12/28/Spring34/" target="_blank" rel="noopener">https://shj7242.github.io/2017/12/28/Spring34/</a></p>]]></content>
      
      
      <categories>
          
          <category> spring framework </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>객체지향 프로그래밍</title>
      <link href="/2018/12/06/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/"/>
      <url>/2018/12/06/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/</url>
      
        <content type="html"><![CDATA[<blockquote><p>관계성있는 객체들의 집합이라는 관점으로 접근하는 software 디자인.</p></blockquote><h2 id="프로토타입기반-프로그래밍"><a href="#프로토타입기반-프로그래밍" class="headerlink" title="프로토타입기반 프로그래밍"></a>프로토타입기반 프로그래밍</h2><h2 id="JS-객체지향-프로그래밍"><a href="#JS-객체지향-프로그래밍" class="headerlink" title="JS 객체지향 프로그래밍"></a>JS 객체지향 프로그래밍</h2><blockquote><p>JS는 프로토타입 기반 언어이다.</p></blockquote><p>그래서 function()을 class로 사용한다.</p><h3 id="The-Class"><a href="#The-Class" class="headerlink" title="The Class"></a>The Class</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="The-Object-Class-Instance"><a href="#The-Object-Class-Instance" class="headerlink" title="The Object(Class Instance)"></a>The Object(Class Instance)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Persion</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person();</span><br></pre></td></tr></table></figure><h3 id="The-Constructor"><a href="#The-Constructor" class="headerlink" title="The Constructor"></a>The Constructor</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Persion</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">'Person instantiated'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person();</span><br></pre></td></tr></table></figure><h3 id="The-Property-Object-attribute"><a href="#The-Property-Object-attribute" class="headerlink" title="The Property(Object attribute)"></a>The Property(Object attribute)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">gender</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.gender = gender;</span><br><span class="line">  alert(<span class="string">'Person instantiated'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">'Male'</span>);</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">'Female'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//display the person1 gender</span></span><br><span class="line">alert(<span class="string">'person1 is a '</span> + person1.gender); <span class="comment">// person1 is a Male</span></span><br></pre></td></tr></table></figure><h3 id="The-methods"><a href="#The-methods" class="headerlink" title="The methods"></a>The methods</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">gender</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.gender = gender;</span><br><span class="line">  alert(<span class="string">'Person instantiated'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.sayHello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  alert (<span class="string">'hello'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">'Male'</span>);</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">'Female'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// call the Person sayHello method.</span></span><br><span class="line">person1.sayHello(); <span class="comment">// hello</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">gender</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.gender = gender;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.sayGender = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  alert(<span class="keyword">this</span>.gender);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">'Male'</span>);</span><br><span class="line"><span class="keyword">var</span> genderTeller = person1.sayGender;</span><br><span class="line"></span><br><span class="line">person1.sayGender(); <span class="comment">// alerts 'Male'</span></span><br><span class="line">genderTeller(); <span class="comment">// alerts undefined</span></span><br><span class="line">alert(genderTeller === person1.sayGender); <span class="comment">// alerts true</span></span><br><span class="line">alert(genderTeller === Person.prototype.sayGender); <span class="comment">// alerts true</span></span><br></pre></td></tr></table></figure><p>genderTeller(); // alerts undefined </p><p>위의 이유는 gengerTeller()를 호출할때, sayGender의 this가 정의 되어 있지 않기 때문이다. 그래서 해결하기 위해 다음과 같은 방법을 사용한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">genderTeller.call(person1); <span class="comment">//alerts 'Male'</span></span><br></pre></td></tr></table></figure><h3 id="Inheritance"><a href="#Inheritance" class="headerlink" title="Inheritance"></a>Inheritance</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// define the Person Class</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.walk = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  alert (<span class="string">'I am walking!'</span>);</span><br><span class="line">&#125;;</span><br><span class="line">Person.prototype.sayHello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  alert (<span class="string">'hello'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// define the Student class</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Call the parent constructor</span></span><br><span class="line">  Person.call(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// inherit Person</span></span><br><span class="line">Student.prototype = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line"><span class="comment">// correct the constructor pointer because it points to Person</span></span><br><span class="line">Student.prototype.constructor = Student;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// replace the sayHello method</span></span><br><span class="line">Student.prototype.sayHello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  alert(<span class="string">'hi, I am a student'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// add sayGoodBye method</span></span><br><span class="line">Student.prototype.sayGoodBye = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  alert(<span class="string">'goodBye'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> student1 = <span class="keyword">new</span> Student();</span><br><span class="line">student1.sayHello();</span><br><span class="line">student1.walk();</span><br><span class="line">student1.sayGoodBye();</span><br><span class="line"></span><br><span class="line"><span class="comment">// check inheritance</span></span><br><span class="line">alert(student1 <span class="keyword">instanceof</span> Person); <span class="comment">// true </span></span><br><span class="line">alert(student1 <span class="keyword">instanceof</span> Student); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Dependency Injection(java config)</title>
      <link href="/2018/11/29/Dependency-Injection-java-config/"/>
      <url>/2018/11/29/Dependency-Injection-java-config/</url>
      
        <content type="html"><![CDATA[<p>DI(의존성 주입)을 적용하는 방법은 <a href="https://jjjpark.github.io/2018/11/28/Dependency-Injection-DI/" target="_blank" rel="noopener">xml을 이용한 DI</a> 뿐만아니라 java config파일을 만들어서 DI를 적용시키는 방법이 있다.</p><h2 id="Java-config를-이용한-방법"><a href="#Java-config를-이용한-방법" class="headerlink" title="Java config를 이용한 방법"></a>Java config를 이용한 방법</h2><h3 id="ApplicationConfig-java"><a href="#ApplicationConfig-java" class="headerlink" title="ApplicationConfig.java"></a>ApplicationConfig.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> kr.or.connect.diexam01;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationConfig</span> </span>&#123;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Car <span class="title">car</span><span class="params">(Engine e)</span> </span>&#123;</span><br><span class="line">Car c = <span class="keyword">new</span> Car();</span><br><span class="line">c.setEngine(e);</span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Engine <span class="title">engine</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Engine();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Configuration - spring에서 사용하는 설정 클래스</p><p>@Bean - bean으로 등록하겠다.(bean은 컴파일 시간에 객체가 만들어져서 싱글톤으로 관리된다.)</p><h3 id="ApplicationContextExam03-java"><a href="#ApplicationContextExam03-java" class="headerlink" title="ApplicationContextExam03.java"></a>ApplicationContextExam03.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> kr.or.connect.diexam01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextExam03</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">ApplicationContext ac = <span class="keyword">new</span> AnnotationConfigApplicationContext(ApplicationConfig.class);</span><br><span class="line">   </span><br><span class="line">Car car = (Car)ac.getBean(<span class="string">"car"</span>);</span><br><span class="line">car.run();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>하지만, </p><h2 id="더-간단한-방법이-있다"><a href="#더-간단한-방법이-있다" class="headerlink" title="더 간단한 방법이 있다."></a>더 간단한 방법이 있다.</h2><h3 id="ApplicationConfig2-java"><a href="#ApplicationConfig2-java" class="headerlink" title="ApplicationConfig2.java"></a>ApplicationConfig2.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> kr.or.connect.diexam01;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(<span class="string">"kr.or.connect.diexam01"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationConfig2</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@ComponentScan(“kr.or.connect.diexam01”) - 명시된 package를 돌면서 @Component가 붙은 것을 bean으로 만든다.</p><h3 id="Engine-java"><a href="#Engine-java" class="headerlink" title="Engine.java"></a>Engine.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> kr.or.connect.diexam01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Engine</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Engine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Engine 생성자"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exec</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"엔진이 동작합니다."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Car-java"><a href="#Car-java" class="headerlink" title="Car.java"></a>Car.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> kr.or.connect.diexam01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Engine v8;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Car 생성자"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"엔진을 이용하여 달립니다."</span>);</span><br><span class="line">v8.exec();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Autowired - Engine이라는 bean이 있으면 현재 클래스에 주입한다.(DI 적용)</p><h3 id="ApplicationContextExam04-java"><a href="#ApplicationContextExam04-java" class="headerlink" title="ApplicationContextExam04.java"></a>ApplicationContextExam04.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> kr.or.connect.diexam01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextExam04</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">ApplicationContext ac = <span class="keyword">new</span> AnnotationConfigApplicationContext(ApplicationConfig2.class);</span><br><span class="line">   </span><br><span class="line">Car car = ac.getBean(Car.class);</span><br><span class="line">car.run();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>물론, <a href="##더-간단한-방법이-있다.">간단한 방법이 </a> 편하지만, @ComponentScan은 @Component가 달려있어야 Bean으로 만든다. 그래서 외부라이브러리에는 @ComponentScan을 사용할 수 없다. 그럴때는 <a href="## Java config를-이용한-방법">Java Config</a> 방법을 사용한다.</p>]]></content>
      
      
      <categories>
          
          <category> spring framework </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Dependency Injection(DI)</title>
      <link href="/2018/11/28/Dependency-Injection-DI/"/>
      <url>/2018/11/28/Dependency-Injection-DI/</url>
      
        <content type="html"><![CDATA[<p> 객체간의 의존관계를 맺어준다는 의미이다. 그걸 개발자가 해주는것이 아니라 spring IoC 컨데이너에게 제어권을 넘겨 스스로 관계를 맺게 한다.</p><h3 id="Engine-java"><a href="#Engine-java" class="headerlink" title="Engine.java"></a>Engine.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> kr.or.connect.diexam01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Engine</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Engine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Engine 생성자"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exec</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"엔진이 동작합니다."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Car-java"><a href="#Car-java" class="headerlink" title="Car.java"></a>Car.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> kr.or.connect.diexam01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">Engine v8;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Car 생성자"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEngine</span><span class="params">(Engine e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.v8 = e;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"엔진을 이용하여 달립니다."</span>);</span><br><span class="line">v8.exec();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Spring-사용-전"><a href="#Spring-사용-전" class="headerlink" title="Spring 사용 전 :"></a>Spring 사용 전 :</h2><h3 id="Main-java"><a href="#Main-java" class="headerlink" title="Main.java"></a>Main.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">Engine e = <span class="keyword">new</span> Engine();</span><br><span class="line">Car c = <span class="keyword">new</span> Car();</span><br><span class="line">c.setEngine( e );</span><br><span class="line">c.run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Spring-사용-후"><a href="#Spring-사용-후" class="headerlink" title="Spring 사용 후 :"></a>Spring 사용 후 :</h2><p>.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"e"</span> <span class="attr">class</span>=<span class="string">"kr.or.connect.diexam01.Engine"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"car"</span> <span class="attr">class</span>=<span class="string">"kr.or.connect.diexam01.Car"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"engine"</span> <span class="attr">ref</span>=<span class="string">"e"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>위의 xml설정은 다음과 같은 의미를 갖는다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Engine e = <span class="keyword">new</span> Engine();</span><br><span class="line">Car c = <span class="keyword">new</span> Car();</span><br><span class="line">c.setEngine( e );</span><br></pre></td></tr></table></figure><h3 id="ApplicationContextExam02-java"><a href="#ApplicationContextExam02-java" class="headerlink" title="ApplicationContextExam02.java"></a>ApplicationContextExam02.java</h3><p>위의 xml 설정파일을 읽어서 실행하는 부분</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> kr.or.connect.diexam01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextExam02</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext( </span><br><span class="line"><span class="string">"classpath:applicationContext.xml"</span>); </span><br><span class="line"></span><br><span class="line">Car car = (Car)ac.getBean(<span class="string">"car"</span>);</span><br><span class="line">car.run();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">##Result##</span></span><br><span class="line"><span class="comment">Engine 생성자</span></span><br><span class="line"><span class="comment">Car 생성자</span></span><br><span class="line"><span class="comment">엔진을 이용하여 달립니다.</span></span><br><span class="line"><span class="comment">엔진이 동작합니다.</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>작성된 xml은 컴파일 타임에 spring이 싱글톤으로 객체를 생성해준다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Engine 생성자</span></span><br><span class="line"><span class="comment">Car 생성자</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>그리고, Car.run() 메소드를 호출하면 나머지 결과가 나온다.</p><p>이렇게 하면 실행클래스의 코드는 Car라는 클래스만 알아도 어떤 엔진을 사용할지 몰라도 된다. </p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.edwith.org/boostcourse-web/lecture/20657/" target="_blank" rel="noopener">https://www.edwith.org/boostcourse-web/lecture/20657/</a></p>]]></content>
      
      
      <categories>
          
          <category> spring framework </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/11/26/hello-world/"/>
      <url>/2018/11/26/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
  
  
</search>
